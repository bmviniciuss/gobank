// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package generated

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const findPersonByDocument = `-- name: FindPersonByDocument :one
SELECT uuid, name, document, created_at, updated_at FROM person.person 
WHERE document = $1 AND active = true
LIMIT 1
`

type FindPersonByDocumentRow struct {
	Uuid      uuid.UUID
	Name      string
	Document  string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) FindPersonByDocument(ctx context.Context, document string) (FindPersonByDocumentRow, error) {
	row := q.db.QueryRow(ctx, findPersonByDocument, document)
	var i FindPersonByDocumentRow
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Document,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertPerson = `-- name: InsertPerson :exec
INSERT INTO person.person (uuid, name, document, active, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
`

type InsertPersonParams struct {
	Uuid      uuid.UUID
	Name      string
	Document  string
	Active    bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) InsertPerson(ctx context.Context, arg InsertPersonParams) error {
	_, err := q.db.Exec(ctx, insertPerson,
		arg.Uuid,
		arg.Name,
		arg.Document,
		arg.Active,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
